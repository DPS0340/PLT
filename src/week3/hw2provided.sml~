(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)

fun all_except_option(s : string, lst : string list)  =
    let
	fun helper(s: string, lst : list string, excepts : list string, find : bool) =
	    if lst = []
	    then
	        if find
	    	    then SOME excepts
	   	    else NONE
	    else
		let
		    val hd = head lst
		    val tl = tail lst
		in
		    if same_string s hd
		        then
			    helper s tl excepts true
		        else
			    helper s tl (excepts::lst) find
		end
    in
        helper s lst [] false
    end
(* fun get_subtitutions1(llst : string list list, s : string) *)

(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)
